# this code include two parts:
# 1.the pearson correlation calculation.
# 2.the normal and simple linear regression and prediction
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import StandardScaler

# load
df = pd.read_csv('C:/Users/25436/Desktop/EEE421/project/data/Training data.csv')

# selection
features = df.drop('ENERGY_CONSUMPTION_CURRENT', axis=1)
target = df['ENERGY_CONSUMPTION_CURRENT']

# calculate correlation
correlation = features.corrwith(target)
correlation_sorted = correlation.sort_values(ascending=False)
print(correlation_sorted)

# painting
correlation_sorted.plot(kind='bar')
plt.title('Feature Correlation with Target Variable')
plt.xlabel('Features')
plt.ylabel('Correlation Coefficient')
plt.show()

# one more time
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
model = LinearRegression()
model.fit(X_train_scaled, y_train)
predictions = model.predict(X_test_scaled)
errors = y_test - predictions

# rmse, mse, mae
rmse = np.sqrt(mean_squared_error(y_test, predictions))
print(f'Root Mean Squared Error (RMSE): {rmse}')

mse = mean_squared_error(y_test, predictions)
print(f'Mean Squared Error (MSE): {mse}')

mae = mean_absolute_error(y_test, predictions)
print(f'Mean Absolute Error (MAE): {mae}')

plt.scatter(y_test, predictions)
plt.plot(y_test, y_test, 'r--')  # 最佳拟合线
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Regression Plot')
plt.show()

plt.hist(errors, bins=20)
plt.xlabel('Prediction Error')
plt.ylabel('Count')
plt.title('Histogram of Prediction Errors')
plt.show()

new_data = pd.read_csv('C:/Users/25436/Desktop/EEE421/project/data/new_data.csv')
new_data.reset_index(drop=True, inplace=True)
# keep same safety
new_data = new_data[features.columns]
new_data_scaled = scaler.transform(new_data)

# prediction
new_predictions = model.predict(new_data_scaled)

# result
new_data['Predicted_ENERGY_CONSUMPTION_CURRENT'] = new_predictions
print(new_data[['Predicted_ENERGY_CONSUMPTION_CURRENT']])
